name: Deploy Lambda via Terraform
on:
  push:
    branches:
      - main
permissions:
  contents: write  # Autorise le push sur la branche state
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}  # Uncomment if needed
      AWS_REGION: us-east-1  # Change to your preferred region
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Checkout state branch
        uses: actions/checkout@v4
        with:
          ref: state
          path: state_branch
      - name: Restore Terraform state
        run: |
          mkdir -p tfstate
          cp state_branch/tfstate/terraform.tfstate tfstate/terraform.tfstate || echo "No previous state found"
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve
      - name: Get API Gateway URL
        run: terraform output api_endpoint
      - name: Save Terraform state
        run: |
          mkdir -p /tfstate
          cp -f terraform.tfstate /tfstate/ || echo "No state to copy"
          ls -la # Debug: list files to verify state exists
          ls -la /tfstate/ # Debug: verify state was copied
      - name: Commit and push state
        run: |
          cd state_branch
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add tfstate/terraform.tfstate || echo "No state file to add"
          git status # Debug: check git status
          git commit -m "Update Terraform state" || echo "No changes to commit"
          git push origin state
